"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _d = require("d3");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Heatmap = /*#__PURE__*/function () {
  function Heatmap(selector, data) {
    var _this = this;

    var vars = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
      x: 'x',
      y: 'y',
      value: 'value'
    };
    var getters = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
      getX: undefined,
      getY: undefined
    };
    var width = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    var height = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

    _classCallCheck(this, Heatmap);

    this.container = (0, _d.select)(selector);
    this.svg;
    this.data;
    this.dataX;
    this.dataY;
    this.x = vars.x;
    this.y = vars.y;
    this.val = vars.value;
    this.updateData(data, false);
    this.margin = {
      top: 50,
      right: 10,
      bottom: 10,
      left: 10
    };
    this.rect = {
      width: 20,
      r: 0
    };
    this.color = {
      background: 'white',
      text: 'black',
      highlight: 'orange'
    };
    this.duration = 500;
    this.delay = {
      enter: 2 * this.duration,
      update: this.duration,
      exit: 0
    };
    this.width = width;
    this.height = height;
    this.computeDimensions(); // Build color palette

    this.palette;
    this.buildPalette(); // Build reusable tooltip

    this.tooltip;
    this.buildTooltip(); // Draw svg

    this.buildCanvas(); // Build axis scales

    this.xAxis, this.yAxis;
    this.buildAxis(); // Optional y coordinate function getter

    this.getX = getters.getX || function (d) {
      return _this.xAxis(d[_this.x]);
    };

    this.getY = getters.getY || function (d) {
      return _this.yAxis(d[_this.y]);
    }; // Draw heatmap


    this.draw();
  }

  _createClass(Heatmap, [{
    key: "computeDimensions",
    value: function computeDimensions() {
      var width = Math.max(this.width, this.rect.width * this.dataX.length);
      var height = Math.max(this.height, this.rect.width * this.dataY.length);
      this.width = width;
      this.height = height;
    }
  }, {
    key: "capitalize",
    value: function capitalize(string) {
      return string.trim().replace(/^\w/, function (c) {
        return c.toUpperCase();
      });
    }
  }, {
    key: "buildPalette",
    value: function buildPalette() {
      var _this2 = this;

      // Build color scale
      this.palette = (0, _d.scaleSequential)().interpolator(_d.interpolateBuPu).domain([0, (0, _d.max)(this.data, function (d) {
        return d[_this2.val];
      })]);
    }
  }, {
    key: "buildAxis",
    value: function buildAxis() {
      this.container.select('.xAxis').style('opacity', 0).remove();
      this.container.select('.yAxis').style('opacity', 0).remove(); // Build X scales and axis:

      this.xAxis = (0, _d.scaleBand)().range([0, this.width]).domain(this.dataX).padding(0.05);
      var xAxis = this.svg.append('g').attr('class', 'xAxis').style('font-size', 15).attr('transform', "translate(0, -12)");
      xAxis.call((0, _d.axisBottom)(this.xAxis).tickSize(0)).select('.domain').remove();
      xAxis.style('opacity', 0).transition().duration(this.duration).delay(this.delay.enter).style('opacity', 1); // Build Y scales and axis:

      this.yAxis = (0, _d.scaleBand)().range([this.height, 0]).domain(this.dataY).padding(0.05);
      var yAxis = this.svg.append('g').attr('class', 'yAxis').style('font-size', 15);
      yAxis.call((0, _d.axisLeft)(this.yAxis).tickSize(0)).select('.domain').remove();
      yAxis.style('opacity', 0).transition().duration(this.duration).delay(this.delay.enter).style('opacity', 1); // Add ids to ticks

      this.container.selectAll('.xAxis .tick').attr('id', function (d) {
        return "x_".concat(d);
      }).style('transition', 'color .3s').select('text').attr('transform', 'rotate(-45)').attr('dx', -4).attr('dy', 0);
      this.container.selectAll('.yAxis .tick').attr('id', function (d) {
        return "y_".concat(d);
      }).style('transition', 'color .3s');
    }
  }, {
    key: "buildCanvas",
    value: function buildCanvas() {
      var _this3 = this;

      this.svg = this.container.append('svg').attr('class', '.heatmapSVG').attr('width', this.width + this.margin.left + this.margin.right).attr('height', this.height + this.margin.top + this.margin.bottom).append('g').attr('transform', "translate(".concat(this.margin.left, ",\n                                 ").concat(this.margin.top, ")")); // Hide tooltip when outside of container

      this.container.on('mouseleave', function () {
        return _this3.mouseclick(false);
      });
    }
  }, {
    key: "buildTooltip",
    value: function buildTooltip() {
      // create a tooltip
      this.tooltip = this.container.append('div').style('opacity', 0).attr('class', 'tooltip').style('position', 'absolute').style('font-size', '11px').style('background-color', this.color.background).style('border', 'solid').style('border-width', '1px').style('border-radius', '5px').style('padding', '5px').style('transition', 'opacity .5s');
      this.tooltip.append('div').attr('class', 'tooltip-arrow');
    } // Heatmap squares' event listeners

  }, {
    key: "mouseover",
    value: function mouseover(e, d) {
      var _this4 = this;

      (0, _d.select)(e.target).style('stroke', this.color.text).style('opacity', 1);
      ["#x_".concat(d[this.x]), "#y_".concat(d[this.y])].forEach(function (id) {
        _this4.container.select(id).style('color', _this4.color.highlight);
      });
    }
  }, {
    key: "mousemove",
    value: function mousemove(e, d) {
      var coordinates = e.target.getBoundingClientRect();
      this.tooltip.html("".concat(this.capitalize(this.x), ": ").concat(d[this.x], "<br>") + "".concat(this.capitalize(this.y), ": ").concat(d[this.y], "<br>") + "".concat(this.capitalize(this.val), ": ").concat(d[this.val])).transition().duration(50).style('left', coordinates.left + this.rect.width * .9 + 'px').style('top', coordinates.top + this.rect.width * .9 + 'px');
    }
  }, {
    key: "mouseleave",
    value: function mouseleave(e, d) {
      var _this5 = this;

      (0, _d.select)(e.target).style('stroke', 'none').style('opacity', .6);
      ["#x_".concat(d[this.x]), "#y_".concat(d[this.y])].forEach(function (id) {
        _this5.container.select(id).style('color', _this5.color.text);
      });
    }
  }, {
    key: "mouseclick",
    value: function mouseclick() {
      var toggle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var opacity;
      opacity = toggle ? +!+this.tooltip.style('opacity') : 0; // Toggle tooltip

      this.tooltip.style('opacity', opacity);
    }
  }, {
    key: "draw",
    value: function draw() {
      var _this6 = this;

      // add the squares
      var squares = this.svg.selectAll('rect.heatRect').data(this.data, function (d) {
        return d[_this6.x] + ':' + d[_this6.y];
      });
      var squareEnter = squares.enter().append('rect').attr('class', 'heatRect').attr('rx', this.rect.r).attr('ry', this.rect.r).style('stroke-width', 1.5).style('stroke', 'transparent').style('opacity', 0).style('transition', ' stroke .3s, opacity .3s').style('cursor', 'pointer');
      squareEnter.on('mouseover', function (e, d) {
        return _this6.mouseover(e, d);
      }).on('mousemove', function (e, d) {
        return _this6.mousemove(e, d);
      }).on('mouseleave', function (e, d) {
        return _this6.mouseleave(e, d);
      }).on('click', function (e) {
        return _this6.mouseclick(e);
      });
      var squareUpdate = squareEnter.merge(squares).transition().duration(this.duration).delay(this.delay.update).attr('x', function (d) {
        return _this6.getX(d);
      }).attr('y', function (d) {
        return _this6.getY(d);
      }).attr('width', this.xAxis.bandwidth()).attr('height', this.yAxis.bandwidth()).style('fill', function (d) {
        return _this6.palette(d[_this6.val]);
      }).style('opacity', .6);
      squares.exit().transition().duration(this.duration).delay(this.delay.exit).style('opacity', 0).remove();
    }
  }, {
    key: "update",
    value: function update() {
      this.computeDimensions();
      this.buildPalette();
      this.buildAxis();
      this.draw();
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      var _this7 = this;

      var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.data = data;
      this.dataX = _toConsumableArray(new Set(this.data.map(function (d) {
        return d[_this7.x];
      })));
      this.dataY = _toConsumableArray(new Set(this.data.map(function (d) {
        return d[_this7.y];
      })));
      if (update) this.update();
    }
  }, {
    key: "updateX",
    value: function updateX(x) {
      this.x = x;
      this.updateData(this.data);
    }
  }, {
    key: "updateY",
    value: function updateY(y) {
      this.y = y;
      this.updateData(this.data);
    }
  }, {
    key: "hideX",
    value: function hideX() {
      this.container.select('.xAxis').remove();
    }
  }, {
    key: "hideY",
    value: function hideY() {
      this.container.select('.yAxis').remove();
    }
  }, {
    key: "updateVal",
    value: function updateVal(val) {
      this.val = val;
      this.updateData(this.data);
    }
  }]);

  return Heatmap;
}();

var _default = Heatmap;
exports["default"] = _default;